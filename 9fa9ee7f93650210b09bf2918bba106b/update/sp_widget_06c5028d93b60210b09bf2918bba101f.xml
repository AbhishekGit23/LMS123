<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller = function($location, $scope) {
    var c = this;

    // Initialize tabs
    c.initTabs = function() {
        // Show the default tab (first one) on page load
        var defaultTab = document.querySelector('.tab-link');
        c.openTab(defaultTab, 'myCourses');
    };

    // Function to open a specific tab
    c.openTab = function(tabElement, tabName) {
        var i, tabcontent, tablinks;

        // Hide all tab content
        tabcontent = document.getElementsByClassName("tab-content");
        for (i = 0; i < tabcontent.length; i++) {
            tabcontent[i].style.display = "none";
        }

        // Remove active class from all tab links
        tablinks = document.getElementsByClassName("tab-link");
        for (i = 0; i < tablinks.length; i++) {
            tablinks[i].classList.remove("active");
        }

        // Show the current tab content
        document.getElementById(tabName).style.display = "block";

        // Add an active class to the tab link that opened the tab
        tabElement.classList.add("active");
    };

    // Function to handle click events on tab links
    c.handleTabClick = function(event, tabName) {
        var tabElement = event.currentTarget;
        c.openTab(tabElement, tabName);
    };

    // Default initialization
    c.initTabs();

    c.module_page = function(sys_id) {
        var portalURL = $location.absUrl().split('?')[0];
        var pageID = 'lms_modules_content'; 
        var url = portalURL + '?id=' + pageID + '&sys_id=' + sys_id + '&module=-1';
        window.location.href = url;            
    };

    c.courseDetailPage = function(sys_id) {
        var portalURL = $location.absUrl().split('?')[0];
        var pageID = 'lms_course_details';
        var url = portalURL + '?id=' + pageID + '&sys_id=' + sys_id;
        window.location.href = url;
    };

    c.redirectToCourses = function() {
        window.location.href = 'lms?id=lms_courses';
    };
};
]]></client_script>
        <controller_as>c</controller_as>
        <css>body {
    font-family: Popins, sans-serif;
}

.container {
    display: flex;
    flex-direction: column;
    width: 100%;
    max-width: auto; /* Adjust width as needed */
    margin: 0 auto; /* Centers the container */
    padding: 20px;
  /*height: 500px;*/
}

.tabs {
    display: flex;
    justify-content: space-between;
    margin-bottom: 20px;
}

.tab-link {
    flex: 1; /* Each tab takes up 50% width */
    text-align: center; /* Center align text */
    padding: 14px 0;
    cursor: pointer;
    background-color: #f1f1f1;
    border: none;
    transition: background-color 0.3s;
    font-size: 16px;
}

.tab-link.active {
    background-color: #00bcd4;
    color: white;
}

.tab-link:not(.active):hover {
    background-color: #ddd;
}

.tab-content {
    display: none;
}

.tab-content.active {
    display: block;
}

.course-container, .requested-courses-container {
    display: grid;
    grid-template-columns: 1fr;
    gap: 20px;
    padding: 20px;
}

@media (min-width: 600px) {
    .course-container, .requested-courses-container {
        grid-template-columns: repeat(2, 1fr);
    }
}

@media (min-width: 900px) {
    .course-container, .requested-courses-container {
        grid-template-columns: repeat(3, 1fr);
    }
}

.course-card, .requested-course {
    position: relative;
    background: #fff;
    border: 1px solid #ddd;
    border-radius: 10px;
    padding: 20px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
    overflow: hidden;
    margin: 10px 7px;
}

.course-card:hover .course-hover-details, .requested-course:hover .course-hover-details {
    opacity: 1;
    transform: translateY(0);
}

.course-name {
    font-size: 1.5em;
    font-weight: 600;
    color: #333;
    text-align: center;
}

.course-image {
    width: 100%;
    height: 150px;
    object-fit: contain;
    border-radius: 5px;
    margin-bottom: 10px;
    aspect-ratio: 1;
}

.course-hover-details {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(255, 255, 255, 0.95);
    padding: 20px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    border-radius: 10px;
    opacity: 0;
    transform: translateY(20px);
    transition: all 0.3s ease;
}

.course-hover-details h3 {
    font-size: 1.5em;
    text-align: center;
    margin-bottom: 10px;
}

.course-hover-details p {
    font-size: 0.9em;
    color: #333;
    text-align: center;
}

.no-courses {
    text-align: center;
    margin-top: 20px;
}

.no-courses p {
    font-size: 1.2em;
    color: #333;
    margin-bottom: 10px;
}

.no-courses button {
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 5px;
    padding: 10px 20px;
    font-size: 1em;
    cursor: pointer;
    transition: background-color 0.3s;
}

.no-courses button:hover {
    background-color: #0056b3;
}
.category-filter{
	height: 100%;
  width: 50%;
  display: flex;
  align-items: center;
  justify-content: space-evenly;
}
 
.category-filter &gt; p{
	margin: 0;
  height: 100%;
  display: flex;
  align-items: center;
}
 
.category-filter &gt; select{
	height: 100%;
  width: 50%;
  border: none;
}
</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>lms_my_learnings</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>LMS My Learnings</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
    data.courses = [];
    data.requestedCourses = [];
    data.completedCourses = [];
    var userId = gs.getUserID(); // Get the current user's ID

    // Query the enrollment table for courses the current user is enrolled in
    var grEnrollment = new GlideRecordSecure('x_1383177_lms_app_enrollment');
    grEnrollment.addQuery('learner_name', userId);
    grEnrollment.query();

    var enrolledCourseIds = [];
    var requestedCourseIds = [];
    var completedCourseIds = [];
    while (grEnrollment.next()) {
        var status = grEnrollment.getValue('status');
			var completion_status = grEnrollment.getValue('completion_status');
        if (status == 'approval pending' || status == 'requested') {
            requestedCourseIds.push(grEnrollment.getValue('course_name'));
        } else if (completion_status == 'complete') {
            completedCourseIds.push(grEnrollment.getValue('course_name'));
        } else {
            enrolledCourseIds.push(grEnrollment.getValue('course_name'));
        }
    }

    data.totalCourses = enrolledCourseIds.length;
    data.totalRequestedCourses = requestedCourseIds.length;
    data.totalCompletedCourses = completedCourseIds.length;

    if (enrolledCourseIds.length > 0) {
        // Query the course table for the courses the current user is enrolled in
        var grCourse = new GlideRecordSecure('x_1383177_lms_app_course');
        grCourse.addQuery('sys_id', 'IN', enrolledCourseIds);
        grCourse.query();

        while (grCourse.next()) {
            data.courses.push({
                Name: gs.getMessage(grCourse.getDisplayValue('course_name')),
                Thumbnail: grCourse.getDisplayValue('thumbnail'),
                sys_id: grCourse.getUniqueValue(),
                Description: gs.getMessage(grCourse.getDisplayValue('short_description'))
            });
        }
    }

    if (requestedCourseIds.length > 0) {
        // Query the course table for the requested courses
        var grRequestedCourse = new GlideRecordSecure('x_1383177_lms_app_course');
        grRequestedCourse.addQuery('sys_id', 'IN', requestedCourseIds);
        grRequestedCourse.query();

        while (grRequestedCourse.next()) {
            data.requestedCourses.push({
                Name: gs.getMessage(grRequestedCourse.getDisplayValue('course_name')),
                Thumbnail: grRequestedCourse.getDisplayValue('thumbnail'),
                sys_id: grRequestedCourse.getUniqueValue(),
                Description: gs.getMessage(grRequestedCourse.getDisplayValue('short_description')) // Add full description
            });
        }
    }

    if (completedCourseIds.length > 0) {
        // Query the course table for the completed courses
        /*var grCompletedCourse = new GlideRecordSecure('x_1383177_lms_app_enrollment');
        grCompletedCourse.addQuery('sys_id', 'IN', completedCourseIds);
				grCompletedCourse.addQuery('completion_status', 'complete');
        grCompletedCourse.query();*/
				
				var grCompleteCourseDetail = new GlideRecordSecure('x_1383177_lms_app_course');
        grCompleteCourseDetail.addQuery('sys_id', 'IN', completedCourseIds);
        grCompleteCourseDetail.query();
        while (grCompleteCourseDetail.next()) {
            data.completedCourses.push({
                Name: gs.getMessage(grCompleteCourseDetail.getDisplayValue('course_name')),
                Thumbnail: grCompleteCourseDetail.getDisplayValue('thumbnail'),
                sys_id: grCompleteCourseDetail.getUniqueValue(),
                Description: gs.getMessage(grCompleteCourseDetail.getDisplayValue('short_description'))
            });
        }
    }

    if (input) {
        // Handle user input if needed
    }
})();
]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>abhishek.s</sys_created_by>
        <sys_created_on>2024-06-13 09:38:46</sys_created_on>
        <sys_id>06c5028d93b60210b09bf2918bba101f</sys_id>
        <sys_mod_count>68</sys_mod_count>
        <sys_name>LMS My Learnings</sys_name>
        <sys_package display_value="LMS Application" source="x_1383177_lms_app">9fa9ee7f93650210b09bf2918bba106b</sys_package>
        <sys_policy/>
        <sys_scope display_value="LMS Application">9fa9ee7f93650210b09bf2918bba106b</sys_scope>
        <sys_update_name>sp_widget_06c5028d93b60210b09bf2918bba101f</sys_update_name>
        <sys_updated_by>abhishek.s</sys_updated_by>
        <sys_updated_on>2024-06-24 15:46:23</sys_updated_on>
        <template><![CDATA[<div class="container">
  <div class="tabs">
    <button class="tab-link active" ng-click="c.handleTabClick($event, 'myCourses')">${My Courses ({{ c.data.courses.length }})}</button>
    <button class="tab-link" ng-click="c.handleTabClick($event, 'requestedCourses')">${Requested Courses ({{ c.data.requestedCourses.length }})}</button>
    <button class="tab-link" ng-click="c.handleTabClick($event, 'completedCourses')">${Completed Courses ({{ c.data.completedCourses.length }})}</button>
  </div>

  <div class="tab-content" id="myCourses" style="display: block;">
    <!-- My Courses Section -->
    <div class="course-container" ng-if="c.data.courses.length > 0">
      <div class="course-card" ng-click="c.module_page(s.sys_id)" ng-repeat="s in c.data.courses">
        <img class="course-image" ng-src="{{ s.Thumbnail }}" alt="{{ s.Name }}">
        <div class="course-name" ng-bind="s.Name"></div>
        <div class="course-hover-details">
          <h3 ng-bind="s.Name"></h3>
          <p ng-bind="s.Description"></p>
        </div>
      </div>
    </div>
    <div class="no-courses" ng-if="c.data.courses.length === 0">
      <p>${You have not enrolled in any courses.}</p>
      <button ng-click="c.redirectToCourses()">${View Course List}</button>
    </div>
  </div>

  <div class="tab-content" id="requestedCourses">
    <!-- Requested Courses Section -->
    <div class="requested-courses-container" ng-if="c.data.requestedCourses.length > 0">
      <div class="requested-course" ng-click="c.courseDetailPage(s.sys_id)" ng-repeat="s in c.data.requestedCourses">
        <img class="course-image" ng-src="{{ s.Thumbnail }}" alt="{{ s.Name }}">
        <div class="course-name" ng-bind="s.Name"></div>
        <div class="course-hover-details">
          <h3 ng-bind="s.Name"></h3>
          <p ng-bind="s.Description"></p>
        </div>
      </div>
    </div>
    <div class="no-courses" ng-if="c.data.requestedCourses.length === 0">
      <p>${No courses have been requested.}</p>
    </div>
  </div>

  <div class="tab-content" id="completedCourses">
    <!-- Completed Courses Section -->
    <div class="course-container" ng-if="c.data.completedCourses.length > 0">
      <div class="course-card" ng-click="c.module_page(s.sys_id)" ng-repeat="s in c.data.completedCourses">
        <img class="course-image" ng-src="{{ s.Thumbnail }}" alt="{{ s.Name }}">
        <div class="course-name" ng-bind="s.Name"></div>
        <div class="course-hover-details">
          <h3 ng-bind="s.Name"></h3>
          <p ng-bind="s.Description"></p>
        </div>
      </div>
    </div>
    <div class="no-courses" ng-if="c.data.completedCourses.length === 0">
      <p>${You have not completed any courses.}</p>
    </div>
  </div>
</div>
]]></template>
    </sp_widget>
</record_update>
