<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_security_acl">
    <sys_security_acl action="INSERT_OR_UPDATE">
        <active>true</active>
        <admin_overrides>true</admin_overrides>
        <advanced>true</advanced>
        <condition/>
        <description>Allow read for records in x_1383177_lms_app_course, for users with role x_1383177_lms_app.course_manager, and if the ACL script returns true.</description>
        <local_or_existing>Local</local_or_existing>
        <name>x_1383177_lms_app_course</name>
        <operation display_value="read">read</operation>
        <script><![CDATA[// var courseManagerField = current.course_manager;
// var currentUserID = gs.getUserID();
// var courseManagers = [];

// // Fetch the names of course managers from the Glide List field
// if (courseManagerField) {
//     courseManagerField.forEach(function(manager) {
//         courseManagers.push(manager.user.toString());
//     });
// }

// // Check if the current user's ID is present in the course managers list
// if (courseManagers.indexOf(currentUserID) !== -1) {
//     answer = true;
// } else {
//     answer = false;
// }




// var courseManagerField = current.course_manager; 
// var currentUserID = gs.getUserID();
// var courseManagers = [];

// // Fetch the names of course managers from the Glide List field
// if (courseManagerField) {
//     for (var i = 0; i < courseManagerField.size(); i++) {
//         var manager = courseManagerField.get(i);
//         courseManagers.push(manager.user.toString());
//     }
// }

// // Check if the current user's ID is present in the course managers list
// if (courseManagers.indexOf(currentUserID) !== -1) {
//     answer = true; // Allow access if the current user is a course manager for this course
// } else {
//     answer = false; // Deny access if the current user is not a course manager for this course
// }












(function() {
    var courseManagerField = current.course_manager;
    var currentUserID = gs.getUserID();

    // Fetch the names of course managers from the Glide List field and split the values
    var courseManagers = [];
    if (courseManagerField) {
        var managersList = courseManagerField.split(","); // Assuming course managers are separated by commas
        managersList.forEach(function(manager) {
            courseManagers.push(manager.trim()); // Remove any leading or trailing whitespace
        });
    }

    // Check if the current user's name is present in the course managers list
    if (courseManagers.indexOf(gs.getUserName()) !== -1) {
        answer = true; // Allow access if the current user is a course manager for this course
    } else {
        answer = false; // Deny access if the current user is not a course manager for this course
    }
})();
]]></script>
        <security_attribute/>
        <sys_class_name>sys_security_acl</sys_class_name>
        <sys_created_by>abhishek.s</sys_created_by>
        <sys_created_on>2024-05-07 10:19:56</sys_created_on>
        <sys_id>462c2349934e4210b09bf2918bba10a3</sys_id>
        <sys_mod_count>11</sys_mod_count>
        <sys_name>x_1383177_lms_app_course</sys_name>
        <sys_package display_value="LMS Application" source="x_1383177_lms_app">9fa9ee7f93650210b09bf2918bba106b</sys_package>
        <sys_policy/>
        <sys_scope display_value="LMS Application">9fa9ee7f93650210b09bf2918bba106b</sys_scope>
        <sys_update_name>sys_security_acl_462c2349934e4210b09bf2918bba10a3</sys_update_name>
        <sys_updated_by>abhishek.s</sys_updated_by>
        <sys_updated_on>2024-05-08 07:03:31</sys_updated_on>
        <type display_value="record">record</type>
    </sys_security_acl>
</record_update>
