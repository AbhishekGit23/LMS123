<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller = function($scope, $http, $sce, spUtil) {
	var c = this;

	c.selectedModuleIndex = null;
	c.isModuleView = false;
	c.activeTab = 'modules'; // Default active tab
	c.showCompletionModal = false;

	// Function to select a module by index
	c.selectModuleByIndex = function(index) {
		c.selectedModuleIndex = index;
		c.selectedModule = c.data.modules[index].sys_id;
		c.isModuleView = true; // Switch to module view
	};

	// Function to select a module by sys_id
	c.selectModule = function(moduleSysId) {
		c.completedCoursePage = false;
		for (var i = 0; i < c.data.modules.length; i++) {
			if (c.data.modules[i].sys_id === moduleSysId) {
				c.selectModuleByIndex(i);
				break;
			}
		}
	};
	// Helper function to get the current module
	c.getCurrentModule = function() {
		if (c.selectedModuleIndex !== null) {
			return c.data.modules[c.selectedModuleIndex];
		}
		return {};
	};

	// Check if current module is the last module
	c.isLastModule = function() {
		return c.selectedModuleIndex !== null && c.selectedModuleIndex === c.data.modules.length - 1;
	};

	// Navigate to the next lesson
	c.nextLesson = function() {
		if (!c.isModuleView) {
			// If on the initial page, switch to the first module
			c.isModuleView = true;
			if (c.data.modules.length > 0) {
				c.selectModuleByIndex(0);
			}
		} else if (c.selectedModuleIndex !== null) {
			// Mark the current module as completed
			c.data.modules[c.selectedModuleIndex].completed = true;
			c.data.selectedmodule =c.selectedModuleIndex;
			c.data.modules[c.selectedModuleIndex].status=true;
			// Update the progress in the database


			if (c.selectedModuleIndex < c.data.modules.length - 1) {
				// Navigate to the next module
				c.server.update().then(function(){

				});

				c.getProgressPercentage();
				c.selectModuleByIndex(c.selectedModuleIndex + 1);
			} else {
				// Navigate to a new page with the Complete Course button
				c.server.update().then(function(){

				});
				c.data.modules[c.selectedModuleIndex].status=true;
				c.getProgressPercentage();
				c.isModuleView = false;
				c.showCompletionModal = false;
				c.completedCoursePage = true; // Show the new page with Complete Course button
			}
		}
	};

	// Complete the course
	c.completeCourse = function() {
		// Show completion modal if all modules are completed
		if (c.allModulesCompleted()) {
			c.showCompletionModal = true;
			console.log(c.showCompletionModal);
			// $scope.$apply(); // Ensure Angular updates the scope
		}
	};

	// Function to check if all modules are completed
	c.allModulesCompleted = function() {
		return c.data.modules.every(function(module) {
			return module.completed;
		});
	};

	// Navigate to the previous lesson
	c.prevLesson = function() {
		if (c.selectedModuleIndex !== null && c.selectedModuleIndex > 0) {
			c.selectModuleByIndex(c.selectedModuleIndex - 1);
		}
	};

	// Function to navigate to My Learnings page
	c.goToMyLearnings = function() {
		// Assuming there is a function to navigate to My Learnings page
		window.location.href = 'https://dev211199.service-now.com/lms?id=lms_my_learning'; // Adjust the URL as necessary
	};
	// Function to get progress percentage
	c.getProgressPercentage = function() {

		c.data.count++;
		var completedModules = c.data.count;
		var totalModules = c.data.modules.length;
		c.data.percentage= Math.round((completedModules / totalModules) * 100);
		document.getElementById("hello").innerHTML ="Progress:"+ c.data.percentage + "%" ;

	};

};
]]></client_script>
        <controller_as>c</controller_as>
        <css>* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: Arial, sans-serif;
}

body {
    display: flex;
    height: 100vh;
    overflow: hidden;
}

.container {
    display: flex;
    width: 100%;
}

.sidebar {
    width: 250px;
    background-color: #f8f8f8;
    border-right: 1px solid #ddd;
    overflow-y: auto;
    height: 100vh;
    position: sticky;
    top: 0;
}

.sidebar-content {
    padding: 20px;
}

.sidebar-content h2 {
    margin-bottom: 20px;
}

.sidebar-content ul {
    list-style: none;
}

.sidebar-content ul li {
    margin-bottom: 10px;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.sidebar-content ul li a {
    text-decoration: none;
    color: #007bff;
    display: block;
    padding: 10px;
    border-radius: 4px;
    transition: background-color 0.3s;
    flex-grow: 1;
}

.sidebar-content ul li a:hover,
.sidebar-content ul li a.active {
    background-color: #007bff;
    color: white;
}

.sidebar-content ul li .tick-mark {
    color: green;
    margin-left: 10px;
}
.completed {
  color: #008000; /* Green color for completed modules */
}


.content {
    flex-grow: 1;
    overflow-y: auto;
    padding: 40px;
    display: flex;
    justify-content: center; /* Center content horizontally */
}

.page {
    width: 80%; /* Set the maximum width */
    max-width: 1200px; /* Set the maximum width */
    min-width: 300px; /* Set the minimum width */
    height: 700px; /* Set the maximum height */
    min-height: 200px; /* Set the minimum height */
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    padding: 40px;
    overflow: scroll; /* Ensure proper scrolling behavior */
}

.module-header {
    text-align: center;
}

.module-header .header-logo {
    width: 200px;
    margin-bottom: 20px;
}

.module-header h1 {
    padding-top: 30px;
    font-size: 3.5rem;
    text-align: center;
    margin-bottom: 20px;
}

.module-header p {
    font-size: 1.3rem;
    text-align: center; /* Center align the description */
    margin-bottom: 40px;
}

.lessons {
    margin-bottom: 40px;
    height: calc(100% - 45px); /* Adjust height to accommodate progress bar */
    overflow-y: auto;
    position: relative; /* Ensure relative positioning for absolute elements */
}

.lessons .lesson h2 {
    font-size: 3rem;
    margin-bottom: 20px;
}

.lessons .lesson p {
    font-size: 2rem;
    line-height: 1.5;
}

.navigation-buttons {
    display: flex;
    justify-content: space-between;
    margin-top: 40px;
}

.navigation-buttons button {
    padding: 10px 20px;
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

.navigation-buttons button:disabled {
    background-color: #ccc;
    cursor: not-allowed;
}

/* Modal CSS */
.modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0, 0, 0, 0.4);
    align-items: center;
    justify-content: center;
}

.modal {
  display: flex;
  justify-content: center;
  align-items: center;
  position: fixed;
  z-index: 1;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  overflow: auto;
  background-color: rgba(0, 0, 0, 0.4);
}

.modal-content {
  background-color: #fefefe;
  margin: 15% auto;
  padding: 20px;
  border: 1px solid #888;
  width: 80%;
  max-width: 600px;
}

.close {
  color: #aaa;
  float: right;
  font-size: 28px;
  font-weight: bold;
}

.close:hover,
.close:focus {
  color: black;
  text-decoration: none;
  cursor: pointer;
}
.close {
  color: #aaa;
  float: right;
  font-size: 28px;
  font-weight: bold;
}

.close:hover,
.close:focus {
  color: black;
  text-decoration: none;
  cursor: pointer;
}
</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>lms_module_content</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>LMS Module Content</name>
        <option_schema>[]</option_schema>
        <public>true</public>
        <roles/>
        <script><![CDATA[(function() {
	var courseSysId = $sp.getParameter('sys_id');

	if(!input){
		data.course = {};
		data.modules = [];
		data.a=false;
		// Fetch course details
		var courseGr = new GlideRecord('x_1383177_lms_app_course');
		if (courseGr.get(courseSysId)) {
			data.course.sys_id = courseGr.getValue('sys_id');
			data.course.course_name = courseGr.getValue('course_name');
			data.course.short_description = courseGr.getValue('short_description');
		}

		var courseModuleTable = 'x_1383177_lms_app_m2m_x_1383177_lm_x_1383177_lm';
		var moduleTable = 'x_1383177_lms_app_module';

		var moduleGr = new GlideRecordSecure(courseModuleTable);
		moduleGr.addQuery('x_1383177_lms_app_course', courseSysId); // Adjust field names as per your many-to-many table
		moduleGr.orderBy('order');
		moduleGr.query();

		while (moduleGr.next()) {
			var moduleSysId = moduleGr.getValue('x_1383177_lms_app_module'); // Adjust field names as per your many-to-many table
			var m2mgr = new GlideRecord('x_1383177_lms_app_m2m_x_1383177_lm_sys_user');
				m2mgr.addQuery('sys_user', gs.getUserID());
				m2mgr.addQuery('course', courseSysId);
				m2mgr.addQuery('x_1383177_lms_app_module',moduleSysId);
				m2mgr.query();
				if(m2mgr.next()){
					data.a= true;
				}
			else{
				data.a=false;
			}
				
			var moduleGrDetails = new GlideRecord(moduleTable);
			if (moduleGrDetails.get(moduleSysId)) {
				var moduleObj = {
					sys_id: moduleSysId,
					name: moduleGrDetails.getValue('name'), // Adjust field names as per your module table
					content_body: moduleGrDetails.getValue('content_body'), // Adjust field names as per your module table
					status: data.a,
				};
				data.modules.push(moduleObj);
			}
		}
		data.count=0;
		var m2mgr2 = new GlideRecord('x_1383177_lms_app_m2m_x_1383177_lm_sys_user');
				m2mgr2.addQuery('sys_user', gs.getUserID());
				m2mgr2.addQuery('course', courseSysId);
				m2mgr2.query();
				while(m2mgr2.next()){
					data.count++;
				}
		
		var totalModules = data.modules.length;
		data.percentage= Math.round((data.count / totalModules) * 100);
		//gs.addInfoMessage(data.count);
	}


    if (input) {
        var userId = gs.getUserID();
        var moduleSysId1 = input.modules[input.selectedmodule].sys_id;

        // Create a new GlideRecord instance
        var progressGr = new GlideRecord('x_1383177_lms_app_m2m_x_1383177_lm_sys_user');

        // Add query conditions to check if the record already exists
        progressGr.addQuery('sys_user', userId);
        progressGr.addQuery('course', courseSysId);
        progressGr.addQuery('x_1383177_lms_app_module', moduleSysId1);
        progressGr.query();

        // If no matching records are found, insert a new record
        if (!progressGr.next()) {
            var newProgressGr = new GlideRecord('x_1383177_lms_app_m2m_x_1383177_lm_sys_user');
            newProgressGr.initialize();
            newProgressGr.setValue('sys_user', userId);
            newProgressGr.setValue('course', courseSysId);
            newProgressGr.setValue('x_1383177_lms_app_module', moduleSysId1);
            newProgressGr.setValue('progress', 'complete');
            newProgressGr.insert();
        }
    }
})();
]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>pranav.k</sys_created_by>
        <sys_created_on>2024-06-04 04:30:39</sys_created_on>
        <sys_id>28f8e24a93a64210b09bf2918bba101e</sys_id>
        <sys_mod_count>246</sys_mod_count>
        <sys_name>LMS Module Content</sys_name>
        <sys_package display_value="LMS Application" source="x_1383177_lms_app">9fa9ee7f93650210b09bf2918bba106b</sys_package>
        <sys_policy/>
        <sys_scope display_value="LMS Application">9fa9ee7f93650210b09bf2918bba106b</sys_scope>
        <sys_update_name>sp_widget_28f8e24a93a64210b09bf2918bba101e</sys_update_name>
        <sys_updated_by>abhishek.s</sys_updated_by>
        <sys_updated_on>2024-06-21 17:55:49</sys_updated_on>
        <template><![CDATA[<div class="container">
  <div class="sidebar">
    <div class="sidebar-content">
      <h2>{{c.data.course.course_name}}</h2>
      <div>
        <p id='hello'>Progress: {{c.data.percentage}}%</p> <!-- Progress Status -->
        <ul>
          <li ng-repeat="module in c.data.modules">
            <a href="javascript:void(0)" ng-click="c.selectModule(module.sys_id)" ng-class="{'active': c.selectedModule === module.sys_id, 'completed': module.completed}">
              {{module.name}}
              <span ng-if="module.status || module.completed" class="tick-mark">✔</span>
            </a>
          </li>
        </ul>
      </div>
    </div>
  </div>
  <div class="content">
    <div class="page">
      <!-- Initial Page Content -->
      <div class="module-header" ng-show="!c.isModuleView && !c.completedCoursePage">
        <img src="lms_white.png" alt="LMS Logo" class="header-logo">
        <h1>{{c.data.course.course_name}}</h1>
        <p>{{c.data.course.short_description}}</p>
        <button class="next-lesson" ng-click="c.nextLesson()">Start Course</button>
      </div>
      <!-- Module Content -->
      <div class="green-progress"></div>
      <div class="module-contents" ng-show="c.isModuleView">
        <div class="lessons" onscroll="updateProgress()">
          <div class="lesson">
            <h2>{{c.getCurrentModule().name}}</h2>
            <p ng-bind-html="c.getCurrentModule().content_body"></p>
          </div>
        </div>
        <div class="navigation-buttons">
          <button class="prev-lesson" ng-click="c.prevLesson()" ng-disabled="c.selectedModuleIndex === 0">Previous Lesson</button>
          <button class="next-lesson" ng-click="c.nextLesson()">Next Lesson</button>
        </div>
      </div>
      <!-- Completion Page -->
      <div class="completion-page" ng-show="c.completedCoursePage">
        <h1>Congratulations on completing the modules!</h1>
        <button class="complete-course" ng-click="c.completeCourse()">Complete Course</button>
      </div>
    </div>
  </div>
</div>

<!-- Modal for course completion -->
<div class="modal" ng-show="c.showCompletionModal">
  
  <div class="modal-content">
    
    <h2>Congratulations!</h2>
    <p>You have completed the course successfully.</p>
    <button ng-click="c.goToMyLearnings()">Go to My Learnings</button>
  </div>
</div>
]]></template>
    </sp_widget>
</record_update>
