<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller = function($location, $scope, i18n) {
    var c = this;
    c.pageNumber = 1;
    c.pageSize = 9;
    c.totalCount = 0;
    c.totalPages = 0;
    c.allCourses = [];
    c.filteredCourses = [];

    // Function to initialize courses with pagination
    c.initializeCourses = function() {
        c.allCourses = c.data.courses; // Assuming courses are provided in c.data.courses
        c.totalCount = c.allCourses.length;
        c.totalPages = Math.ceil(c.totalCount / c.pageSize);
        c.updateFilteredCourses();
    };

    c.updateFilteredCourses = function() {
        var start = (c.pageNumber - 1) * c.pageSize;
        var end = start + c.pageSize;
        c.filteredCourses = c.allCourses.slice(start, end);
    };

    c.filterCoursesByDomain = function(domainSysId) {
        if (domainSysId) {
            c.allCourses = c.data.courses.filter(function(course) {
                return course.DomainSysIds.includes(domainSysId);
            });
            c.totalCount = c.allCourses.length;
            c.totalPages = Math.ceil(c.totalCount / c.pageSize);
            c.pageNumber = 1; // Reset to first page
            c.updateFilteredCourses();
        } else {
            c.allCourses = c.data.courses; // Reset to all courses if no domain filter is applied
            c.totalCount = c.allCourses.length;
            c.totalPages = Math.ceil(c.totalCount / c.pageSize);
            c.pageNumber = 1; // Reset to first page
            c.updateFilteredCourses();
        }
    };

    c.redirectToCourseDetail = function(sys_id) {
        var portalURL = $location.absUrl().split('?')[0];
        var pageID = 'lms_course_details';
        var url = portalURL + '?id=' + pageID + '&sys_id=' + sys_id;
        window.location.href = url;
    };

    $scope.$watch(function() {
        return $location.search();
    }, function(params) {
        var domainSysId = params.domain_sys_id;
        c.filterCoursesByDomain(domainSysId);
    });

    // Pagination controls
    c.nextPage = function() {
        if (c.pageNumber < c.totalPages) {
            c.pageNumber++;
            c.updateFilteredCourses();
            window.scrollTo({ top: 0, behavior: 'smooth' }); // Scroll to top
        }
    };

    c.prevPage = function() {
        if (c.pageNumber > 1) {
            c.pageNumber--;
            c.updateFilteredCourses();
            window.scrollTo({ top: 0, behavior: 'smooth' }); // Scroll to top
        }
    };

    // Initialize with the first set of courses
    c.initializeCourses();
};
]]></client_script>
        <controller_as>c</controller_as>
        <css>.container {
  display: flex;
  flex-direction: column;
  width: 100%;
  max-width: 1200px;
  margin: 0 auto;
}

.course-container {
  display: grid;
  grid-template-columns: 1fr;
  gap: 20px;
  padding: 20px;
}

@media (min-width: 600px) {
  .course-container {
    grid-template-columns: repeat(2, 1fr);
  }
}

@media (min-width: 900px) {
  .course-container {
    grid-template-columns: repeat(3, 1fr);
  }
}

.course-card {
  position: relative;
  background: #fff;
  border: 1px solid #ddd;
  border-radius: 10px;
  padding: 20px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  transition: all 0.3s ease;
  overflow: hidden;
  margin-top: 10px;
  margin-bottom: 10px;
  margin-left: 7px;
  margin-right: 7px;
}

.course-name {
  font-size: 1.5em;
  font-weight: 600;
  color: #333;
  text-align: center;
}

.course-image {
  width: 100%;
  height: 150px;
  object-fit: contain;
  border-radius: 5px;
  margin-bottom: 10px;
  aspect-ratio: 1;
}

.course-card:hover .course-hover-details {
  opacity: 1;
  transform: translateY(0);
}

.course-hover-details {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(255, 255, 255, 0.95);
  padding: 20px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  border-radius: 10px;
  opacity: 0;
  transform: translateY(20px);
  transition: all 0.3s ease;
}

.course-hover-details h3 {
  font-size: 1.5em;
  text-align: center;
  margin-bottom: 10px;
}

.course-hover-details p {
  font-size: 0.9em;
  color: #333;
  text-align: center;
}

.pagination-controls {
  display: flex;
  justify-content: center;
  align-items: center;
  margin-top: 20px;
  margin-bottom: 130px;
}

.pagination-controls button {
  background-color: #007bff;
  color: white;
  border: none;
  padding: 10px 20px;
  margin: 0 10px;
  cursor: pointer;
  border-radius: 5px;
  transition: background-color 0.3s ease;
}

.pagination-controls button:disabled {
  background-color: #cccccc;
  cursor: not-allowed;
}

.pagination-controls span {
  font-size: 1.2em;
  margin: 0 10px;
}

.course-access {
  position: absolute;
  top: 10px;
  right: 10px;
  padding: 5px 10px;
  
  border-radius: 5px;
  color: #fff;
  font-size: 0.8em;
  font-weight: bold;
}

.free-access {
  background-color: #50bf06;
}

.requestable {
  background-color: #166dde;
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>lms_courses_coursepage</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>LMS Courses (Course Page)</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
	data.courses = [];
	var domainSysId = $sp.getParameter('domain_sys_id'); // Get domain_sys_id from the query parameter
	
	
	var grCourse = new GlideRecordSecure('x_1383177_lms_app_course');
	grCourse.addActiveQuery();
	grCourse.query();

	while (grCourse.next()) {
		// Fetch all domain associations for each course
		var domainCourse = new GlideRecordSecure('x_1383177_lms_app_m2m_x_1383177_lm_x_1383177_lm_m2m_domain_course');
		domainCourse.addQuery('x_1383177_lms_app_course', grCourse.getUniqueValue());
		domainCourse.query();

		var domainIds = [];
		while (domainCourse.next()) {
			domainIds.push(domainCourse.getValue('x_1383177_lms_app_course_domain'));
		}

		data.courses.push({
			Name: gs.getMessage(grCourse.getDisplayValue('course_name')),
			Access: gs.getMessage(grCourse.getDisplayValue('accessibility')),
			Short_description: gs.getMessage(grCourse.getDisplayValue('short_description')),
			Thumbnail: grCourse.getDisplayValue('thumbnail'),
			sys_id: grCourse.getUniqueValue(),
			DomainSysIds: domainIds, 
			Description: gs.getMessage(grCourse.getDisplayValue('short_description')) 
		});
	}

	if (input) {
		
	}
})();
]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>pranav.k</sys_created_by>
        <sys_created_on>2024-05-30 05:11:35</sys_created_on>
        <sys_id>2b52cdac93e64210b09bf2918bba107d</sys_id>
        <sys_mod_count>151</sys_mod_count>
        <sys_name>LMS Courses (Course Page)</sys_name>
        <sys_package display_value="LMS Application" source="x_1383177_lms_app">9fa9ee7f93650210b09bf2918bba106b</sys_package>
        <sys_policy/>
        <sys_scope display_value="LMS Application">9fa9ee7f93650210b09bf2918bba106b</sys_scope>
        <sys_update_name>sp_widget_2b52cdac93e64210b09bf2918bba107d</sys_update_name>
        <sys_updated_by>pranav.k</sys_updated_by>
        <sys_updated_on>2024-06-28 06:45:34</sys_updated_on>
        <template><![CDATA[<div class="container">
  <div class="course-container" id="cTest">   
    <div class="course-card"
         ng-click="c.redirectToCourseDetail(s.sys_id)"
         ng-repeat="s in c.filteredCourses">
       
      <img class="course-image" ng-src="{{ s.Thumbnail }}" alt="{{ s.Name }}">
      <div class="course-name" ng-bind="s.Name"></div> 
      <div class="course-access" ng-bind="s.Access" ng-class="{'free-access': s.Access === 'Free to access', 'requestable': s.Access === 'Requestable'}"></div>
      
      <div class="course-hover-details">
        <h3 ng-bind="s.Name"></h3>
        <p ng-bind="s.Description"></p>
      </div>
    </div>
  </div>
<!-- Pagination Controls -->
  <div class="pagination-controls">
    <button ng-click="c.prevPage()" ng-disabled="c.pageNumber === 1">Previous</button>
    <span>${Page {{c.pageNumber}} of {{c.totalPages}}}</span>
    <!--<a href="#cTest" ><button ng-click="c.nextPage()" ng-disabled="c.pageNumber >= c.totalPages">${Next}</button></a>-->
    <button ng-click="c.nextPage()" ng-disabled="c.pageNumber >= c.totalPages">${Next}</button>
  </div>
</div>]]></template>
    </sp_widget>
</record_update>
