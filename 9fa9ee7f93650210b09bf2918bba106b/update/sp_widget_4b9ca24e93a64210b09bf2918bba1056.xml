<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller = function($location, $timeout, $sce, i18n) {
	var c = this;

	// Function to get query parameter from URL
	c.getQueryParameter = function(name) {
		var url = $location.absUrl();
		var regex = new RegExp('[\\?&]' + name + '=([^&#]*)');
		var results = regex.exec(url);
		return results === null ? '' : decodeURIComponent(results[1].replace(/\+/g, ' '));
	};

	// Get sys_id from URL
	var sys_id = c.getQueryParameter('sys_id');

	// Pass sys_id to server script
	if (sys_id) {
		c.server.update({
			sys_id: sys_id
		}).then(function(response) {
			console.log('Server response:', response);
			c.formatTimestamps();
		}).catch(function(error) {
			console.error('Error fetching data:', error);
		});
	} else {
		console.error('No sys_id parameter found in URL');
	}

	if (c.data.answers && c.data.answers.content) {
		c.data.answers.content.value = $sce.trustAsHtml(c.data.answers.content.value);
	}

	c.redirectToDiscussionDetail = function(sys_id) {
		var portalURL = $location.absUrl().split('?')[0];
		var pageID = 'lms_forum_answers';
		var url = portalURL + '?id=' + pageID + '&sys_id=' + sys_id;
		window.location.href = url;
	};

	// Function to submit the answer
	c.submitAnswer = function(isValid) {
		console.log('Form submitted, isValid:', isValid);
		if (isValid) {
			var answerData = {
				question_ref: sys_id,
				answer: c.answer
			};
			c.server.get({
				action: 'submitAnswer',
				answerData: answerData
			}).then(function(response) {
				if (response.data.success) {
					c.redirectToDiscussionDetail(sys_id);
				} else {
					console.error('Error submitting answer');
				}
			});
		}
	};

	//function to format timestamps
	c.formatTimestamps = function() {
		if (c.data.question && c.data.question.timestamp) {
			c.data.question.timestamp = c.timeAgo(new Date(c.data.question.timestamp));
		}
		c.data.answers.forEach(function(answer) {
			answer.timestamp = c.timeAgo(new Date(answer.timestamp));
		});
	};

	// Function to calculate time ago
	c.timeAgo = function(date) {
		var now = new Date();
		var seconds = Math.floor((now - date) / 1000);
		var interval = Math.floor(seconds / 31536000);

		if (interval >= 1) return interval + " year" + (interval > 1 ? "s" : "") + " ago";
		interval = Math.floor(seconds / 2592000);
		if (interval >= 1) return interval + " month" + (interval > 1 ? "s" : "") + " ago";
		interval = Math.floor(seconds / 86400);
		if (interval >= 1) return interval + " day" + (interval > 1 ? "s" : "") + " ago";
		interval = Math.floor(seconds / 3600);
		if (interval >= 1) return interval + " hour" + (interval > 1 ? "s" : "") + " ago";
		interval = Math.floor(seconds / 60);
		if (interval >= 1) return interval + " minute" + (interval > 1 ? "s" : "") + " ago";
		return "just now";
	};
};
]]></client_script>
        <controller_as>c</controller_as>
        <css>body {
  font-family: 'Poppins', sans-serif;
  margin: 0;
  padding: 0;
  background-color: #e8f0fe;

}

.discussion-detail-page {
  padding: 20px;
  max-width: 1200px;
  margin: 20px auto;
}

.discussion-header {
  background: #4a90e2;
  color: #fff;
  padding: 20px;
  border-radius: 10px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  animation: fadeInDown 0.6s ease-in-out;
  margin-bottom: 20px;
}

.discussion-header h1 {
  font-weight: bold;
  font-size: 1.5em;
  margin-bottom: 10px;
}

.discussion-header p {
  font-size: 1.2em;
}

.discussion-meta {
  font-size: 0.9em;
  color: #ddd;
}

.discussion-replies {
  display: flex;
  flex-direction: column;
  gap: 20px;
  padding-top: 30px;
}

.reply-form {
  background: #fff;
  padding: 20px;
  border-radius: 10px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  animation: fadeInLeft 0.6s ease-in-out;
}

.reply-form h2 {
  font-size: 1.8em;
  margin-bottom: 20px;
  color: #4a90e2;
  text-align: left;
}

.editor-container {
  display: flex;
  flex-direction: column;
  gap: 10px;
}

#editor {
  width: 100%;
  height: 150px;
  padding: 10px;
  font-size: 1em;
  border: 1px solid #ddd;
  border-radius: 5px;
  resize: vertical;
  margin-bottom: 10px;
  transition: border 0.3s;
}

#editor:focus {
  border-color: #4a90e2;
}

.reply-form-controls {
  display: flex;
  justify-content: space-between;
  flex-wrap: wrap; 
  align-items: center;
}

.reply-form label {
  display: flex;
  align-items: center;
  gap: 5px;
  padding: 10px 20px;
  background-color: #f5f5f5;
  border-radius: 5px;
  cursor: pointer;
  transition: background-color 0.3s;
  font-size: 1em;
  color: #333;
  border: 1px solid #ddd;
}

.reply-form label:hover {
  background-color: #e0e0e0;
}

.reply-form i {
  font-size: 1.2em;
  color: #4a90e2;
}

.reply-form button {
  padding: 10px 20px;
  font-size: 1em;
  background-color: #4a90e2;
  color: #fff;
  border: none;
  cursor: pointer;
  border-radius: 5px;
  transition: background-color 0.3s;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
}

.reply-form button:hover {
  background-color: #357ABD;
}

.replies-list {
  background: #fff;
  padding: 20px;
  border-radius: 10px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  animation: fadeInRight 0.3s ease-in-out;
}

.replies-list h2 {
  font-size: 1.8em;
  margin-bottom: 20px;
  color: #4a90e2;
}

.reply-card {
  margin-bottom: 20px;
  padding: 20px;
  background: #f9f9f9;
  border-radius: 10px;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
  transition: transform 0.3s, box-shadow 0.3s;
}

.reply-card:hover {
  transform: translateY(-5px);
  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
}

.reply-author {
  font-weight: bold;
  color: #4a90e2;
  margin-bottom: 5px;
}

.reply-time {
  font-size: 0.9em;
  color: #777;
  margin-bottom: 10px;
}

.reply-content p {
  font-size: 1.1em;
  line-height: 1.6;
  color: #555;
}

.reply-content a {
  color: #4a90e2;
  cursor: pointer;
  text-decoration: underline;
  display: block;
  margin-top: 5px;
}


/* Animations */
@keyframes fadeInDown {
  from {
    opacity: 0;
    transform: translateY(-20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes fadeInLeft {
  from {
    opacity: 0;
    transform: translateX(-20px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes fadeInRight {
  from {
    opacity: 0;
    transform: translateX(20px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

.no-replies {
  padding: 20px;
  background-color: #f9f9f9;
  border-radius: 10px;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
  color: #555;
  font-size: 1.6em;
  text-align: center;
  margin-bottom: 20px;
}

.question-meta span {
  color: #e0e0e0;
}

.detailed-description-container {
  background: #f9f9f9;
  color: black;
  padding: 15px;
  border-radius: 5px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  margin-bottom: 15px;
}
.detailed-description-container p {
  margin: 0;
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>lms_forum_answers</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>LMS Forum Answers</name>
        <option_schema/>
        <public>true</public>
        <roles/>
        <script><![CDATA[(function() {
	// Ensure data object is initialized
	data.question = {};
	data.answers = [];
	// Get sys_id from URL query parameter using $sp.getParameter
	var sys_id = $sp.getParameter('sys_id');

	if (sys_id) {
		// Fetch and populate question details based on the selected sys_id
		var grQuestion = new GlideRecordSecure('x_1383177_lms_app_discussion');
		if (grQuestion.get(sys_id)) {
			var questionBySysId = grQuestion.getValue('question_by');
			var questionByName = '';
			var createdOn = grQuestion.getValue('sys_created_on');

			// Fetch the user's name from sys_user table using the sys_id
			if (questionBySysId) {
				var grUser = new GlideRecord('sys_user');
				if (grUser.get(questionBySysId)) {
					questionByName = grUser.getValue('name');
				}
			}

			data.question = {
				question: grQuestion.getValue('question'),
				detailed_description: grQuestion.getValue('detailed_description'),
				question_by: questionByName,
				timestamp: createdOn

			};

			// Fetch and populate answers from the "forum answers" table based on the selected sys_id
			var grAnswers = new GlideRecordSecure('x_1383177_lms_app_forum_answers');
			grAnswers.addQuery('question_ref', sys_id);
			grAnswers.orderByDesc('sys_updated_on');
			grAnswers.query();

			while (grAnswers.next()) {
				var answeredBySysId = grAnswers.getValue('answered_by');
				var answeredByName = '';
				var updatedOn = grAnswers.getValue('sys_updated_on');

				// Fetch the user's name from sys_user table using the sys_id
				if (answeredBySysId) {
					var grUserAnswer = new GlideRecord('sys_user');
					if (grUserAnswer.get(answeredBySysId)) {
						answeredByName = grUserAnswer.getValue('name');
					}
				}

				data.answers.push({
					author: answeredByName,
					content: grAnswers.getValue('answer'),
					timestamp: updatedOn
				});
			}
		}
	} else {
		gs.info('No sys_id parameter received.');
	}

	// Handle form submission to save the answer
	if (input && input.action === 'submitAnswer' && input.answerData) {
		var grAnswer = new GlideRecord('x_1383177_lms_app_forum_answers');
		grAnswer.initialize();
		grAnswer.setValue('question_ref', input.answerData.question_ref);
		grAnswer.setValue('answer', input.answerData.answer);
		grAnswer.setValue('answered_by', gs.getUserID()); 
		grAnswer.insert();
		data.success = true;		
	} else {
		data.success = false;
	}
})();
]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>pranav.k</sys_created_by>
        <sys_created_on>2024-06-04 04:46:39</sys_created_on>
        <sys_id>4b9ca24e93a64210b09bf2918bba1056</sys_id>
        <sys_mod_count>122</sys_mod_count>
        <sys_name>LMS Forum Answers</sys_name>
        <sys_package display_value="LMS Application" source="x_1383177_lms_app">9fa9ee7f93650210b09bf2918bba106b</sys_package>
        <sys_policy/>
        <sys_scope display_value="LMS Application">9fa9ee7f93650210b09bf2918bba106b</sys_scope>
        <sys_update_name>sp_widget_4b9ca24e93a64210b09bf2918bba1056</sys_update_name>
        <sys_updated_by>pranav.k</sys_updated_by>
        <sys_updated_on>2024-06-20 04:58:56</sys_updated_on>
        <template><![CDATA[<div class="discussion-detail-page">
  <div class="discussion-header">
    <div class="question-meta">
      <span>Posted by: <span ng-bind="data.question.question_by"></span></span>
      <span style="float: right;">Posted: <span ng-bind="data.question.timestamp"></span></span>
    </div>
    <h1 ng-bind="data.question.question"></h1>
    <div class="detailed-description-container">
      <p class="reply-content" ng-bind-html="data.question.detailed_description"></p>
    </div>
  </div>


  <div class="replies-list">
    <h2>Replies</h2>
    <div ng-if="data.answers.length === 0" class="no-replies">
      No replies yet. You can be the first to share your answer!
    </div>
    <div class="reply-card" ng-repeat="answer in data.answers">
      <div class="reply-author" ng-bind="answer.author"></div>
      <div class="reply-timestamp" ng-bind="answer.timestamp" style="float: right; font-size: 0.9em; color: gray;"></div>
      <div class="reply-content">
        <p ng-if="answer.content.length <= 200" ng-bind-html="answer.content"></p>
        <div ng-if="answer.content.length > 200">
          <p ng-bind-html="answer.content.substring(0, 200) + '...'"></p>
          <p ng-if="answer.expanded" ng-bind-html="answer.content"></p>
          <a href="javascript:void(0);" ng-click="answer.expanded = !answer.expanded">{{ answer.expanded ? 'Show less' : 'Expand this answer' }}</a>
        </div>
      </div>
    </div>

  </div>

  <div class="discussion-replies">
    <form class="reply-form" ng-submit="c.submitAnswer(c.answerForm.$valid)" name="c.answerForm" novalidate>
      <h2>Post Your Answer</h2>
      <div class="editor-container">
        <textarea id="editor" ng-model="c.answer" rows="5" placeholder="Write your answer here..." required></textarea>
        <div class="reply-form-controls">
          <label for="attachment">
            <i class="fa fa-paperclip"></i>
            <span>Attach files: </span>
            <input type="file" id="attachment" multiple>
          </label>
          <button type="submit" class="submit-btn">Submit</button>
        </div>
      </div>
    </form>
  </div>

</div>]]></template>
    </sp_widget>
</record_update>
